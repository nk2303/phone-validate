{"version":3,"sources":["logo.svg","services/api.js","components/AccessForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKEND_DOMAIN","process","api","phoneNumber","pN","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","catch","err","console","log","accessCode","data","AccessForm","useState","setPhoneNumber","setAccessCode","isPhoneSubmitted","setIsPhoneSubmitted","validated","setValidated","onSubmit","e","preventDefault","type","name","placeholder","value","onChange","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,oHCArCC,EAAiBC,8DA6BVC,EApBU,SAACC,GACpB,IAAMC,EAAK,CAAED,eACb,OAAOE,MAAM,GAAD,OAAIL,EAAJ,UAA4B,CACpCM,OAAQ,OACRC,QAVC,CACL,eAAgB,mBAChBC,OAAQ,oBASJC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACpBC,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAI,iBAAkBF,OAapCd,EAVQ,SAACC,EAAagB,GAC/B,IAAMC,EAAO,CAAEjB,cAAagB,cAC5B,OAAOd,MAAM,GAAD,OAAIL,EAAJ,WAA6B,CACrCM,OAAQ,OACRC,QApBC,CACL,eAAgB,mBAChBC,OAAQ,oBAmBJC,KAAMC,KAAKC,UAAUS,KACtBR,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WC8BVO,EAnDI,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAEdnB,EAFc,KAEDoB,EAFC,OAGeD,mBAAS,IAHxB,mBAGdH,EAHc,KAGFK,EAHE,OAI2BF,oBAAS,GAJpC,mBAIdG,EAJc,KAIIC,EAJJ,OAKaJ,oBAAS,GALtB,mBAKdK,EALc,KAKHC,EALG,KA0BrB,OACI,6BACED,EAAY,iDAA6B,KAC3C,0BAAME,SAtBiB,SAAAC,GACvBA,EAAEC,iBACF7B,EAAmBC,GACnBuB,GAAoB,KAoBhB,6BACI,wDACA,2BAAOM,KAAK,OAAOC,KAAK,cAAcC,YAAY,kBAAkBC,MAAOhC,EAAaiC,SAd1E,SAAAN,GACtBP,EAAeO,EAAEO,OAAOF,YAiBtBV,EACE,0BAAMI,SAxBY,SAAAC,GACtBA,EAAEC,iBACF7B,EAAiBC,EAAagB,GAAYP,MAAK,SAAAC,GAAI,OAAIe,EAAaf,QAuB5D,6BACI,8EACA,2BAAOmB,KAAK,OAAOC,KAAK,aAAaC,YAAY,iBAAiBC,MAAOhB,EAAYiB,SAlB5E,SAAAN,GACrBN,EAAcM,EAAEO,OAAOF,YAqBnB,OCjCGG,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.c605a7e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const BACKEND_DOMAIN = process.env.REACT_APP_SKIPLI_ACCESS_DOMAIN;\n\nconst headers = () => {\n  return {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n};\n\nconst getPhoneNumber = (phoneNumber) => {\n    const pN = { phoneNumber }\n    return fetch(`${BACKEND_DOMAIN}/phone`, {\n        method: \"POST\",\n        headers: headers(),\n        body: JSON.stringify(pN)\n    }).then(resp => resp.json())\n    .catch( err => console.log(\"catch err here\", err));\n};\n\nconst validateCode = (phoneNumber, accessCode) => {\n    const data = { phoneNumber, accessCode }\n    return fetch(`${BACKEND_DOMAIN}/access`, {\n        method: \"POST\",\n        headers: headers(),\n        body: JSON.stringify(data)\n    }).then(resp => resp.json());\n};\n\n\nexport const api = {\n    getPhoneNumber,\n    validateCode\n};","import React, {useState} from 'react';\nimport {api} from '../services/api'\n\n\nconst AccessForm = () => {\n\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [accessCode, setAccessCode] = useState('');\n    const [isPhoneSubmitted, setIsPhoneSubmitted] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    const submitPhoneHandler = e => {\n        e.preventDefault();\n        api.getPhoneNumber(phoneNumber);\n        setIsPhoneSubmitted(true);\n    }\n\n    const submitCodeHandler = e => {\n        e.preventDefault();\n        api.validateCode(phoneNumber, accessCode).then(resp => setValidated(resp))\n    }\n\n    const handlePhoneChange = e => {\n        setPhoneNumber(e.target.value);\n    }\n\n    const handleCodeChange = e => {\n        setAccessCode(e.target.value);\n    }\n\n    return (\n        <div>\n        { validated ? <h1>Validate Success!</h1> : null }   \n        <form onSubmit={submitPhoneHandler}>\n            <div>\n                <p>Enter your phone number: </p>\n                <input type=\"text\" name=\"phoneNumber\" placeholder=\"Phone number...\" value={phoneNumber} onChange={handlePhoneChange}/>\n            </div>\n        </form>\n\n        { isPhoneSubmitted ?\n            <form onSubmit={submitCodeHandler}>\n                <div>\n                    <p>Enter access code that was sent to your phone: </p>\n                    <input type=\"text\" name=\"accessCode\" placeholder=\"Access code...\" value={accessCode} onChange={handleCodeChange}/>\n                </div>\n            </form>\n            :\n            null\n        }\n        </div>\n        \n    )\n}\n\nexport default AccessForm;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AccessForm from './components/AccessForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AccessForm/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}